import cv2
import numpy as np

#读取图片
image = cv2.imread('D://xuexi//zuoye//week4//canny//cannyphoto.jpg',0)

#噪声抑制 - 高斯滤波
blurred  = cv2.GaussianBlur(image,(5,5),0)

"""
计算梯度 - sobel算子
blurred:输入图像，通常是经过高斯滤波处理后的图像。
cv2.CV-64F:输出图像的数据类型，这里表示使用64位浮点数来表示梯度值。
第一个数值参数表示求解水平方向上的梯度
第二个数值参数表示求解水平方向上的梯度
ksize=3:梯度计算使用的Sobel率波器的尺寸，一般位正方形，这里是3x3的矩阵。
"""

gradient_x = cv2.Sobel(blurred,cv2.CV_64F,1,0,ksize = 3)
gradient_y = cv2.Sobel(blurred,cv2.CV_64F,0,1,ksize = 3)

# 计算边缘强度和方向
magnitude = np.sqrt(gradient_x**2+gradient_y**2) # 计算幅值，用算术平方根计算斜边
angle = np.arctan2(gradient_y,gradient_x)*(180/np.pi) # 通过反正切函数计算角度

#非极大值抑制
suppress = np.zeros_like(magnitude) #用于创建一个与magnitude具有相同大小和数据类型的全零数组。suppress用于存储梯度的非极大值抑制结果。
height,width = magnitude.shape #返回一个包含图像高度和宽度的元组。用解构幅值的方式将高度和宽度分别赋值给height,width
for i in range(1,height-1):
    for j in range(1,width-1):
        direction = angle[i,j]
        neighbor,neighbor2 = 0,0

        # 根据边缘方向判断相邻像素位置
        if(0 <= direction<22.5) or (157.5 <= direction <= 180):
            neighbor1 = magnitude[i,j+1]
            neighbor2 = magnitude[i,j-1]
        elif 22.5 <= direction < 67.5:
            neighbor1 = magnitude[i+1,j-1]
            neighbor2 = magnitude[i-1,j+1]
        elif 67.5 <= direction < 112.5:
            neighbor1 = magnitude[i+1,j]
            neighbor2 = magnitude[i-1,j]
        elif 112.5 <= direction <157.5:
            neighbor1 = magnitude[i-1,j-1]
            neighbor2 = magnitude[i+1,j+1]

        if magnitude[i,j] >= neighbor1 and magnitude[i,j] >= neighbor2:
            suppress[i,j] = magnitude[i,j]

# 双阈值处理
high_threashold = 50
low_threshold =20
edge_map = np.zeros_like(suppress)
strong_edges = (suppress >= high_threashold)
weak_edges = (suppress >= low_threshold)&(suppress < high_threashold)
edge_map[strong_edges] = 255
edge_map[weak_edges] = 50

#边缘跟踪
"""
1.从给定的坐标（i,j）开始，检查edge_map[i,j]是否等于50（边缘检测时设定的高域值）。如果是，将其设置位255，即将其标记为强边缘。
2.对(i,j)周围的8个相邻像素进行遍历，使用两个for循环来遍历x和y的偏移量。
3.对于每个相邻像素(i+dx,j+dy)，进行边界检查，确保不会超出图像的范围。
4.如果相邻像素的值是低域值像素(之前被标记为弱边缘)，则递归调用trace_edge函数，传递相邻像素的坐标作为新的起点，执行相同的追踪过程。
5.通过逐个遍历所有像素点，并在遇到边缘时调用trace_edges函数，完成对所有与强边缘相连的弱边缘像素的追踪。
"""
def trace_edges(i,j):
    if edge_map[i,j] == 50:
        edge_map[i,j] = 255
        for dx in range(-1,2):
            for dy in range(-1,2):
                if(i+dx >= 0) and (i+dx < height) and (j+dy >= 0) and (j+dy < width):
                    trace_edges(i+dx,j+dy)
for i in range(height):
    for j in range(width):
        if edge_map[i,j] == 255:
            trace_edges(i,j)

#显示结果
cv2.imshow('Canny_image',edge_map)
cv2.waitKey(0)
cv2.destroyAllWindows()






