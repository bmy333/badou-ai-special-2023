OpenCV常见算法
1.图像的基本操作读取，显示，存储：通过调用OpenCV中的cv2.imread(),cv2.imshow(),cv2.write()分别实现。
2.在OpenCV中实现将彩色像素转换为灰度像素
3.图像的几何变换：平移，缩放，旋转，插值（最邻近，双线性）。
4.对比增强：线性变换，伽马变换，直方图均衡化。
5.边缘检测：Sobel,Canny
6.图像的二维滤波：cvFilter2D

随机采样一致性
RANSAC是一种思想，一个求解已知模型的参数框架。它不限定某一特定的问题，可以计算机视觉问题，同样也可以是统计数学，甚至可以是经济领域的模型
参数估计的问题。

它是一种迭代的方法，用来在一组包含离群的被观测数据中估算出数学模型的参数。RANSAC是一个非确定性算法，在某种意义上说，它会产生一个在一定概率下合理的结果，
其允许使用多次的迭代来使其概率增加。

RANSAC的基本假设是“内群”数据可以通过几组模型参数来叙述其数据分布，而“离群”数据则是不适合模型化的数据。数据会受噪声影响，噪声指的是离群，
例如从极端的噪声或错误解释有关数据的测量或不正确的假设。RANSAC假定，给定一组（通常很小的）内群，存在一个程序，这个程序可以估算最佳解释或
最适用于这一数据模型的参数。

RANSAC算法的输入：
1.一组观测数据（往往含有较大的噪声或无效点）
2，一个用于解释观测数据的参数化模型，比如y=ax+b
3.一些可信的参数。


RANSAC的步骤：
1.在数据中随机选择几个点设定为内群
2.计算适合内群的模型 e.g.y=ax+b->y=2x+3,y=4x+5
3.把其他刚才没选的点带入刚才建立的模型中，计算是否为内群e.g.hi=2xi+3->ri
4.记下内群数量。
5.重复以上步骤
6.比较哪次计算中内群数量最多，内群最多的那次所建的模型就是我们所要的界


RANSAC的优缺点
优点：
1.它能鲁棒的估计模型参数。例如，它能从包含大量局外点的数据集中估计出高精度的参数。

缺点：
1.它计算参数的迭代次数没有上限；如果设置迭代次数的上限，得到的结果可能不是最优的结果，甚至可能得到错误的结果，
2.RANSAC只有一定的概率得到可信的模型，概率与迭代次数成正比。
3.它要求设置跟问题相关的阈值。
4.RANSAC只能从特定的数据集中估计出一个模型，如果存在两个（多个）模型。RANSAC不能找到别的模型/
5.要求数学模型已知。


图像相似度比较哈希算法

相似图像搜索的哈希算法有三种：
1.均值哈希算法
2.差值哈希算法
3.感知哈希算法

图像相似度比较哈希算法
什么是哈希（Hash）?
*散列函数（或散列算法，又称哈希函数，英语：Hash Function）是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成
摘要，使得数据量变小，将数据的格式固定下来。该函数数据打乱混合，重新创建一个叫做散列值（hash values,hash codes,hash sums,或hashes）的
指纹。散列值通常用一个短的随机字母和数字组成的字符串来表。

通过哈希算法得到的任意长度的二进制值映射为较短的固定长度的二进制值，即哈希值。此外，哈希值是一段数据唯一且极其紧凑的数值表示形式，如果通过哈希
一段明文得到哈希值，哪怕只更改该段文中的任意一个字母，随后得到的哈希值都将不同。

哈希算法是一个函数，能够把几乎所有的数字文件都转换成一串由数字和字母构成的看似乱码的字符串。

哈希函数作为一种加密函数，其拥有两个最重要特点。
1.不可逆性。输入信息得出输出的那个看似乱码的字符串（哈希值）非常容易，但是从输出的字符串反推输入的结果却是非常非常难。
2.输出值唯一性和不可预测性。只要输入的信息有一点点区别，那么根据哈希算法的出来的输出值也相差甚远。


均值哈希算法
步骤
1.缩放：图片缩放为8*8，保留结构，出去细节
2.灰度化：转换为灰度图
3.求平均值：计算灰度图所有像素的平均值
4.比较：像素值大于平均值记作1，相反记作0，总共64位。
5.生成hash：将上述步骤生成的1和0按顺序组成起来既是图片的指纹（hash）.
6.对比指纹：将两幅图的指纹对比，计算汉明距离，即两个64位的hash值有多少位是不一样的，不相同位数越少，图片越相似。

差值哈希法
差值哈希算法相比较于均值哈希算法，前期和后期基本相同，只有中间比较hash有变化。

步骤：
1.缩放图片缩放8*9，保留结构，除去细节。
2.灰度化：转换位灰度图
3.求平均值：计算灰度图所有像素的平均值。---这步没有，只是为了与均值哈希做对比
4.比较：像素值大于后一个像素值记作1，相反记作0。本行不与下一行对比，每行9个像素，八个差值，有8行，总共64位
5.生成hash：将上述步骤生成的1和0按顺序组合起来既是图片的指纹（hash）。
6.对比指纹：将两幅图的指纹对比，计算汉明距离，即两个64位的哈希值有多少位是不一样的，不相同位数越少，图片越相似。

感知哈希算法
均值哈希算法过于严格，不够精确，更适合搜索缩略图，为了获得更精确的结果可以选择感知哈希算法，它采用的是DCT（离散余弦变换）来降低频率的方法。

步骤：
1.缩小图片：32*32是一个较好的大小，这样方便DCT计算
2.转化为灰度图：把缩放后的图片转化为灰度图。
3.计算DCT：DCT把图片分离成分率的集合。
4.缩小DCT：DCT计算后的矩阵式32*32，保留左上角的8*8，这些图片的最低频率。
5.计算平均值：计算缩小DCT后的所有像素点的平均值。
6.进一步缩小DCT：大于平均值记录为1，反之记录为0。
7.得到信息指纹：组合64个信息位，顺序随意保持一致性。
8.最后比对两张图片的指纹，获得汉明距离即可。


离散余弦变换DCT
*离散余弦变换：主要用于将数据或图像压缩，能够将空域的信号转换到频域上具有良好的去相关性的性能。
*DCT变换本身是无损的，同时，由于DCT变换是对称的，所以，我们可以在量化编码后利用DCT反变换，在接收端恢复原始的图像信息。
*DCT变换在当前的图像分析以及压缩领域有着极为广大的用途，我们常见的JPEG静态图像编码以MJPEG,MPEG动态编码等标准中都适用了DCT变换。