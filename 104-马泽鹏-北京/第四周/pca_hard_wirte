import numpy as np


class CPCA(object):

    #初始化
    def __init__(self, x, k):
        self.x = x
        self.k=k
        self.centerx = []
        self.c = []
        self.u=[]
        self.z=[]
        self.centerx = self._centeralized()#均值中心化
        self.c = self._cov()#求协方差矩阵
        self.u=self._u() #求协方差矩阵特殊值和特殊向量
        self.z=self._z() #计算降维矩阵

    def _centeralized(self):
        print('样本矩阵X:\n', self.x)
        for attr in self.x.T:
            print("attr倒置:", attr)
        mean=np.array([np.mean(attr) for attr in self.x.T])
        print('样本集的特征均值:\n', mean)
        centerx = self.x-mean #减去均值
        print('样本矩阵x的中心化centerx:\n', centerx)
        return centerx

    def _cov(self):
        ns = np.shape(self.centerx)[0]#样本集的样例总数
        c=np.dot(self.centerx.T, self.centerx)/(ns-1)#样本集矩阵的协方差矩阵
        print('样本矩阵X的协方差矩阵c\n',c)
        return c

    def _u(self):
        a,b =np.linalg.eig(self.c)#求x的协方差矩阵c的特征值特征向量
        print('样本集的协方差矩阵C的特征值:\n', a)
        print('样本集的协方差矩阵C的特征向量:\n', b)
        ind = np.argsort(-1*a)#给出特征值降序的topK的索引序列
        ut=[b[:,ind[i]] for i in range(self.k)]#构建K阶降维的降维转换矩阵u
        u= np.transpose(ut)
        print('%d阶降维转换矩阵u:\n'%self.k, u)
        return u

    def _z(self):
        z = np.dot(self.x, self.u)#按照z=xu求降维矩阵z,shape=(m.k), n是样本总数 k是降维矩阵中页数纬度总数
        print('x shape:', np.shape(self.x))
        print('u shape', np.shape(self.u))
        print('z shape', np.shape(z))
        print('样本矩阵x的降维矩阵z:\n', z)
        return z



if __name__=='__main__':
    '10样本3特征的样本集, 行为样例，列为特征维度'
    x = np.array([[10, 15, 29],
                  [15, 46, 13],
                  [23, 21, 30],
                  [11, 9,  35],
                  [42, 45, 11],
                  [9,  48, 5],
                  [11, 21, 14],
                  [8,  5,  15],
                  [11, 12, 21],
                  [21, 20, 25]])
    k = np.shape(x)[1] - 1
    print('样本集(10行3列，10个样例，每个样例3个特征):\n', x)
    pca = CPCA(x,k)
