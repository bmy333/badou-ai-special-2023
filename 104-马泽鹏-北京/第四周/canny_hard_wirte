import math

import matplotlib.pyplot as plt
import numpy as np

#1、灰度化优化项
if __name__=='__main__':
    pic_path='lenna.png'
    img = plt.imread(pic_path)
    if pic_path[-4:]=='.png':
        img=img*255
        #均值灰度化
    img = img.mean(axis=-1)
#2.高斯平滑去掉噪声
    sigma=0.5#高斯核参数，标准差
    dim=int(np.round(6*sigma+1))#根据标准差求高斯核是几乘几的，也就是纬度
    if dim %2==0:
        dim+=1#最好是奇数，不是就加一
    gaussion_filter=np.zeros([dim, dim])#存储高斯核，数组
    tmp = [i-dim//2 for i in range(dim)]#生成一个序列
    n1= 1/(2*math.pi*sigma**2)#计算高斯核
    n2=-1/(2*sigma**2)
    for i in range(dim):
        for j in range(dim):
            gaussion_filter[i,j]=n1*math.exp(n2*(tmp[i]**2+tmp[j]**2))
    gaussion_filter=gaussion_filter/gaussion_filter.sum()
    dx, dy = img.shape
    img_new=np.zeros(img.shape)#存储平滑之后的图像，zeros算出浮点类型数据
    tmp=dim//2
    img_pad=np.pad(img, ((tmp,tmp),(tmp,tmp)),'constant')#边缘提取
    for i in range(dx):
        for j in range(dy):
            img_new[i,j]=np.sum(img_pad[i:i+dim,j:j+dim]*gaussion_filter)
    plt.figure(1)
    plt.imshow(img_new.astype(np.uint8),cmap='gray')#
    plt.axis('off')
#3.检测图像中的水平和垂直，对角线边缘
    sobel_kernel_x=np.array([[-1,0,1],[-2,0,2],[-1,0,1]])
    sobel_kernel_y=np.array([[1,2,1],[0,0,0],[-1,-2,-1]])
    img_tidu_x=np.zeros(img_new.shape)#存储梯度图像
    img_tidu_y=np.zeros([dx,dy])
    img_tidu=np.zeros(img_new.shape)
    img_pad= np.pad(img_new,((1,1),(1,1)), 'constant')#边缘填补
    for i in range(dx):
        for j in range(dy):
            img_tidu_x[i,j]=np.sum(img_pad[i:i+3,j:j+3]* sobel_kernel_x)#x方向
            img_tidu_y[i,j]=np.sum(img_pad[i:i+3,j:j+3]*sobel_kernel_y)
            img_tidu[i,j]=np.sqrt(img_tidu_x[i,j]**2+img_tidu_y[i,j]**2)
    img_tidu_x[img_tidu_x==0]=0.00000001
    angle=img_tidu_y/img_tidu_x
    plt.figure(2)
    plt.imshow(img_tidu.astype(np.uint8),cmap='gray')
    plt.axis('off')
    #4.对梯度幅值进行非极大值抑制
    img_yizhi=np.zeros(img_tidu.shape)
    for i in range(1, dx-1):
        for j in range(1, dx-1):
            flag=True# 在8邻域内是否要抹去做个标记
            temp=img_tidu[i-1:i+2,j-1:j+2]#梯度幅值的8邻域矩阵
            if angle[i,j]<=-1: #使用双线性插值判断一直
                num_1=(temp[0,1]-temp[0,0])/angle[i,j]+temp[0,1]
                num_2=(temp[2,1]-temp[2,2])/angle[i,j]+temp[2,1]
                if not (img_tidu[i,j]>num_1 and img_tidu[i,j]>num_2):
                    flag=False
            elif angle[i,j]>=1:
                num_1=(temp[0,2]-temp[0,1])/angle[i,j]+temp[0,1]
                num_2=(temp[2,0]-temp[2,1])/angle[i,j]+temp[2,1]
                flag=False
            elif angle[i,j]>0:
                num_1=(temp[0,2]-temp[1,2])*angle[i,j]+temp[1,2]
                num_2=(temp[2,0]-temp[1,0])*angle[i,j]+temp[1,0]
                if not (img_tidu[i,j]>num_1 and img_tidu[i,j]>num_2):
                    flag=False
            elif angle[i,j]<0:
                num_1=(temp[1,0]-temp[0,0])*angle[i,j]+temp[1,0]
                num_2=(temp[1,2]-temp[2,2])*angle[i,j]+temp[1,2]
                if not (img_tidu[i,j]>num_1 and img_tidu[i,j]>num_2):
                    flag=False
            if flag:
                img_yizhi[i,j]=img_tidu[i,j]
    plt.figure(3)
    plt.imshow(img_yizhi.astype(np.uint8),cmap='gray')
    plt.axis('off')


#5.用双阈值算法检测和连接边缘

    lower_boundary=img_tidu.mean()*0.5
    high_boundary=lower_boundary*3#设置是低阈值3倍
    zhan=[]
    for i in range(1, img_yizhi.shape[0]-1):
        for j in range(1, img_yizhi.shape[1]-1):
            if img_yizhi[i,j]>=high_boundary:
                img_yizhi[i,j]=255
                zhan.append([i,j])
            elif img_yizhi[i,j]<=lower_boundary:
                img_yizhi[i,j]=0
    while not len(zhan)==0:
        temp_1,temp_2 =zhan.pop()#出站
        a=img_yizhi[temp_1-1:temp_1+2,temp_2-1:temp_2+2]
        if(a[0,0]<high_boundary) and (a[0,0]>lower_boundary):
            img_yizhi[temp_1-1,temp_2-1]=255 # 这个像素点标记为边缘
            zhan.append([temp_1-1,temp_2-1])
        if (a[0, 1] < high_boundary) and (a[0, 1] > lower_boundary):
            img_yizhi[temp_1 - 1, temp_2] = 255
            zhan.append([temp_1 - 1, temp_2])
        if (a[0, 2] < high_boundary) and (a[0, 2] > lower_boundary):
            img_yizhi[temp_1 - 1, temp_2 + 1] = 255
            zhan.append([temp_1 - 1, temp_2 + 1])
        if (a[1, 0] < high_boundary) and (a[1, 0] > lower_boundary):
            img_yizhi[temp_1, temp_2 - 1] = 255
            zhan.append([temp_1, temp_2 - 1])
        if (a[1, 2] < high_boundary) and (a[1, 2] > lower_boundary):
            img_yizhi[temp_1, temp_2 + 1] = 255
            zhan.append([temp_1, temp_2 + 1])
        if (a[2, 0] < high_boundary) and (a[2, 0] > lower_boundary):
            img_yizhi[temp_1 + 1, temp_2 - 1] = 255
            zhan.append([temp_1 + 1, temp_2 - 1])
        if (a[2, 1] < high_boundary) and (a[2, 1] > lower_boundary):
            img_yizhi[temp_1 + 1, temp_2] = 255
            zhan.append([temp_1 + 1, temp_2])
        if (a[2, 2] < high_boundary) and (a[2, 2] > lower_boundary):
            img_yizhi[temp_1 + 1, temp_2 + 1] = 255
            zhan.append([temp_1 + 1, temp_2 + 1])
    for i in range(img_yizhi.shape[0]):
        for j in range(img_yizhi.shape[1]):
            if img_yizhi[i,j] !=0 and img_yizhi[i,j] !=255:
                img_yizhi[i,j]=0

    #绘图
    plt.figure(4)
    plt.imshow(img_yizhi.astype(np.uint8), cmap='gray')
    plt.axis('off')
    plt.show()
