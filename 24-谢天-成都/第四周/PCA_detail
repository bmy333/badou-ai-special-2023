import numpy as np



class CPCA(object):
    # 类的构造函数，初始化类的属性
    def __init__(self, X, K):
        # 将输入的样本矩阵和主成分个数存储为类的属性
        self.X = X
        self.K = K
        # 初始化中心化后的样本矩阵、协方差矩阵、特征向量矩阵和降维后的矩阵
        self.centrX = []
        self.C = []
        self.U = []
        self.Z = []
        # 调用_centralized方法，将样本矩阵进行中心化处理，并将结果存储在centrX属性中
        self.centrX = self._centralized()
        # 调用_C方法，计算协方差矩阵，并将结果存储在C属性中
        self.C = self._C()
        # 调用_U方法，计算特征向量矩阵，并将结果存储在U属性中
        self.U = self._U()
        # 调用_Z方法，将原始样本矩阵投影到低维空间，得到降维后的矩阵Z
        self.Z = self._Z()

    # 定义一个名为_centralized的方法，用于将样本矩阵进行中心化处理
    def _centralized(self):
        centrX = []
        # 计算每个特征的均值
        mean = np.array([np.mean(attr) for attr in self.X.T])
        # 将样本矩阵减去均值，实现中心化处理
        centrX = self.X - mean
        return centrX

    # 定义一个名为_C的方法，用于计算协方差矩阵
    def _C(self):
        # 计算样本个数
        ns = np.shape(self.centrX)[0]
        # 计算协方差矩阵
        C = np.dot(self.centrX.T, self.centrX) / (ns - 1)
        # 返回协方差矩阵
        return C

    # 定义一个名为_U的方法，用于计算特征向量矩阵
    def _U(self):
        # 计算协方差矩阵的特征值和特征向量
        a, b = np.linalg.eig(self.C)
        # 给出特征值降序的topK的索引序列
        ind = np.argsort(-1 * a)
        # 构建K阶降维的降维转换矩阵UT
        UT = [b[:, ind[i]] for i in range(self.K)]
        # 将特征向量矩阵进行转置，得到U矩阵
        U = np.transpose(UT)
        # 返回特征向量矩阵U
        return U

    # 定义一个名为_Z的方法，用于将原始样本矩阵投影到低维空间
    def _Z(self):
        # 将原始样本矩阵与特征向量矩阵相乘，得到降维后的矩阵Z
        Z = np.dot(self.X, self.U)
        # 打印输出降维后的矩阵Z
        print('样本矩阵X的降维矩阵Z:\n', Z)
        # 返回降维后的矩阵Z
        return Z



if __name__ == '__main__':
    # 定义一个包含10个样本和3个特征的样本矩阵
    X = np.array([[10, 15, 29],
                  [15, 46, 13],
                  [23, 21, 30],
                  [11, 9, 35],
                  [42, 45, 11],
                  [9, 48, 5],
                  [11, 21, 14],
                  [8, 5, 15],
                  [11, 12, 21],
                  [21, 20, 25]])
    # 计算要保留的主成分个数
    K = np.shape(X)[1] - 1
    # 打印输出样本矩阵
    print('样本集(10行3列，10个样例，每个样例3个特征):\n', X)
    # 创建CPCA类的实例，进行PCA降维操作
    pca = CPCA(X, K)
